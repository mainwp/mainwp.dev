name: Deploy Documentation

on:
  # Runs on pushes to main branch
  push:
    branches: [ main ]
  
  # Allows manual triggering from the Actions tab
  workflow_dispatch:
  
  # Weekly schedule (Sunday at 2am UTC)
  schedule:
    - cron: '0 2 * * 0'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      # Configure Git and perform checkout
      - name: Configure Git
        run: |
          git config --global advice.detachedHead false
          git config --global core.autocrlf false
          git config --global status.submoduleSummary false
          git config --global diff.ignoreSubmodules all
          git config --global fetch.recurseSubmodules false
          git config --global submodule.recurse false
          echo "Git configuration:"
          git config --list

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: false
          persist-credentials: false
          set-safe-directory: /home/runner/work/mainwp.dev/mainwp.dev

      - name: Verify repository state
        run: |
          echo "Repository structure:"
          find . -maxdepth 3 -name ".git" | sort
          echo "Checking for submodule entries:"
          git config --list | grep submodule || echo "No submodule configs found"
          echo "Checking Git index for submodule entries:"
          git ls-files --stage | grep 160000 || echo "No submodule entries in index"
      
      # Setup PHP
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, intl, zip
          tools: composer:v2

      # Setup Ruby for Jekyll
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      
      # Install dependencies
      - name: Install Dependencies
        run: |
          cd hooks-generator
          composer install --no-dev --prefer-dist --no-progress
          cd ..
          bundle install
      
      # Clone MainWP repositories and remove .git directories
      - name: Clone MainWP repos
        run: |
          # Clean up any existing source directories
          rm -rf sources/mainwp-dashboard sources/mainwp-child
          
          # Create fresh sources directory
          mkdir -p sources
          
          # Clone and clean dashboard repository
          git clone https://github.com/mainwp/mainwp.git sources/mainwp-dashboard
          rm -rf sources/mainwp-dashboard/.git
          
          # Clone and clean child repository
          git clone https://github.com/mainwp/mainwp-child.git sources/mainwp-child
          rm -rf sources/mainwp-child/.git
          
          # Verify no .git directories remain
          echo "Checking for remaining .git directories:"
          find sources -name ".git" -type d || echo "No .git directories found in sources"
      
      # Generate hooks documentation
      - name: Generate hooks documentation
        run: |
          cd hooks-generator
          ./generate-categorized-hooks.sh
      
      # Build Jekyll site
      - name: Build Jekyll
        run: JEKYLL_ENV=production bundle exec jekyll build
        env:
          JEKYLL_ENV: production

      # Prepare clean deploy directory
      - name: Prepare deployment directory
        run: |
          # Create deploy directory
          mkdir -p deploy
          
          # Define files/directories to include
          include_list=(
            "index.html"
            "build"
            "guides"
            "mainwp-hooks"
            "source-code"
            "_site"
            "dox-theme"
            "_includes"
            "_layouts"
            "_sass"
            "LICENSE"
            "README.md"
          )
          
          # Copy only specified files/directories
          for item in "${include_list[@]}"; do
            if [ -e "$item" ]; then
              echo "Including: $item"
              if [ -d "$item" ]; then
                mkdir -p "deploy/$item"
                cp -R "$item"/* "deploy/$item/" 2>/dev/null || true
              else
                cp "$item" "deploy/" 2>/dev/null || true
              fi
            else
              echo "Warning: Included item not found: $item"
            fi
          done
          
          # Simple verification
          echo "Deployment directory contents:"
          ls -la deploy/
          
          # Verify critical files exist
          critical_files=("index.html" "guides/index.md" "mainwp-hooks/index.md")
          missing=0
          
          for file in "${critical_files[@]}"; do
            if [ -f "deploy/$file" ] || [ -f "deploy/_site/$file" ]; then
              echo "✅ Found critical file: $file"
            else
              echo "❌ Missing critical file: $file"
              missing=$((missing + 1))
            fi
          done
          
          if [ $missing -gt 0 ]; then
            echo "Warning: $missing critical files missing from deployment"
          else
            echo "All critical files present"
          fi
      
      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: deploy # Only deploy the clean directory
          branch: gh-pages
          clean: true # Automatically remove deleted files from the deploy branch
